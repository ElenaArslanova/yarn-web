import csvimport randomfrom db.data.manager import get_golden_csvfrom models.metrics import jacard_metricdef read_clusters(filename):    """    Считывает кластеры из csv файла в словарь. Каждому кластеру соответсвует словарь с сетом id синсетов,    из которых он состоит, и сет слов из этих синсетов    """    with open(filename) as csvfile:        reader = csv.DictReader(csvfile, delimiter=';', fieldnames=['index', 'synset_ids', 'words'])        clusters = {}        for row in reader:            index = int(row['index'])            clusters[index] = {}            clusters[index]['synset_ids'] = set(                [int(s_id) for s_id in row['synset_ids'].replace('s', '').split(',')])            clusters[index]['words'] = frozenset(row['words'].split(','))        return clustersdef find_most_similar_cluster(clusters, golden_cluster, similarity_function):    """    Находит самый похожий (по количеству совпавших id синсетов) кластер из ярна для кластера из голдена    :param clusters: словарь с кластерами ярна    :param golden_cluster: кластер голдена (словарь)    :param similarity_function: как сравнивать кластер ярна с кластером голдена    """    cluster_similarity = {i: similarity_function(clusters[i], golden_cluster) for i in clusters}    max_similarity = max(cluster_similarity.values())    return [s_id for s_id in cluster_similarity if cluster_similarity[s_id] == max_similarity]def get_golden_to_clusters_mapping():    """    для каждого кластера голдена находит наиболее похожий на него кластер ярна    :return: словарь, где ключ - id голдена, а значение - id наиболее похожего кластера ярна    """    yarn_clusters = read_clusters('3to9.csv')    golden = get_golden_csv('new_golden.csv')    golden_to_cluster = {}    for g_id in golden:        golden_cluster = golden[g_id]        # сначала сравниваем схожесть на основе совпавших id синсетов        id_similar_clusters = find_most_similar_cluster(yarn_clusters, golden_cluster,                    lambda yarn_clst, golden_clst:                    jacard_metric(None, None, golden_clst['synset_ids'], yarn_clst['synset_ids']))        if len(id_similar_clusters) > 1:            # сравниваем полученные кластеры по совпавшим словам с кластером голдена            word_similar_clusters = find_most_similar_cluster({i: yarn_clusters[i] for i in id_similar_clusters},                                                              golden_cluster,                    lambda yarn_clst, golden_clst:                    jacard_metric(None, None, golden_clst['words'], yarn_clst['words']))            if len(word_similar_clusters) > 1:  # снова несколько вариантов кластеров                # берем случайно выбранный кластер                golden_to_cluster[g_id] = random.choice(word_similar_clusters)            else:                golden_to_cluster[g_id] = word_similar_clusters[0]        else:            golden_to_cluster[g_id] = id_similar_clusters[0]    return golden_to_clusterif __name__ == '__main__':    mapping = get_golden_to_clusters_mapping()    with open('mapping.csv', 'w', newline='') as f:        fieldnames = ['golden_id', 'cluster_id']        csv_writer = csv.DictWriter(f, delimiter=';', fieldnames=fieldnames)        csv_writer.writeheader()        csv_writer.writerows([{fieldnames[0]: pair[0], fieldnames[1]: pair[1]} for pair in mapping.items()])